//
// Created by wpsimon09 on 15/02/24.
//

#ifndef PABLO_RENDERER_FRAMEBUFFERCUBE_H
#define PABLO_RENDERER_FRAMEBUFFERCUBE_H

#include "Renderer/Utils/FrameBuffer/FrameBuffer.h"

#include "Renderer/Geometry/Shapes/Cube/CubeGeometry.h"
#include "Renderer/Utils/Texture/Texture3D/Texture3D.h"
#include "Renderer/Utils/ShaderHelper/ShaderHelper.h"
#include "Renderer/Utils/FrameBuffer/RenderBuffer/RenderBuffer.h"
#include "memory"

/***
 * Class representing frame buffer which is drawing to the 6 faces of the cube
 * @note this class does not support rendering to default frame buffer
 */
class FrameBufferCube : public OGLObject {
public:
    /***
     * Creates instance of the FrameBufferCube
     * @param width width of a one face of the cube
     * @param height height of a one face of the cube
     * @param shader shader to be used while preforming rendering
     * @param mipLevels mip map levels used for the texture of each face
     * @note all values applies to each face of the cube
     */
    FrameBufferCube(int width, int height, std::shared_ptr<Shader> shader, unsigned int mipLevels = 1);

    /***
     * ID of the frame buffer generated by OpenGL
     */
    GLuint ID;

    /***
     * Initiates drawing to the color attachment of the frame buffer
     * @param input input texture if needed
     * @param mipLevel mip level into which rendering will be preformed
     * @return result of the rendering in form of GL_TEXTURE_CUBE_MAP
     */
    std::shared_ptr<Texture3D> renderToSelf(TextureBase input, unsigned int mipLevel = 0);

    /***
     * Color attachments of the frame buffer
     */
    std::shared_ptr<Texture3D> colorAttachmentCube;

    /***
     * Updates dimensions of each face of the cube
     * @param width width of the texture
     * @param height height of the texture
     */
    void updateDimetions(unsigned int width, unsigned int height);
private:
    unsigned int mipLevels;
    std::shared_ptr<Shader> shader;

    /***
     * Render buffer used for rendering
     */
    std::unique_ptr<RenderBuffer> renderBuffer;

    /***
     * Cube geometry that is used for rendering
     */
    std::unique_ptr<Geometry> geometry;
    int width, height;
public:
    void clear() {}

    //-------------
    // C++ RULE 3/5
    //-------------
    FrameBufferCube(const FrameBufferCube &) = delete;

    FrameBufferCube &operator=(const FrameBufferCube &) = delete;

    ~FrameBufferCube() { this->clear(); }

    FrameBufferCube(FrameBufferCube &&other) noexcept;

    FrameBufferCube &operator=(FrameBufferCube &&other) noexcept;

    void bind() override;

    void unbind() override;

};

#endif //PABLO_RENDERER_FRAMEBUFFERCUBE_H
