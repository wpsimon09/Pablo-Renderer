//
// Created by wpsimon09 on 31/12/23.
//

#include "Texture2D.h"

Texture2D::Texture2D(const char *path, bool isPBRMaterial):TextureBase() {
    this->isPBRMaterial = isPBRMaterial;
    this->fullPath = path;
    this->type = GL_TEXTURE_2D;
    this->type_string = "GL_TEXTURE_2D";
    this->internalFormat = GL_RGBA;
    glCreateTextures(GL_TEXTURE_2D, 1, &this->ID);
    glCheckError();

    this->loadPNG(path);
}

Texture2D::Texture2D() {
}

Texture2D::Texture2D(int width, int height, float *data, GLenum format) {
    this->type = GL_TEXTURE_2D;
    this->isPBRMaterial = false;
    this->wasFound = true;
    this->type_string = "GL_TEXTURE_2D";
    this->fullPath = "Generated by OpenGL";
    this->texWidth = width;
    this->texHeight = height;
    this->internalFormat = format;

    glCreateTextures(GL_TEXTURE_2D, 1, &this->ID);
    glCheckError();

    glBindTexture(GL_TEXTURE_2D, this->ID);
    glCheckError();

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA,width, height, 0, GL_RGBA, format, data);
    glCheckError();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glCheckError();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glCheckError();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glCheckError();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glCheckError();

    glBindTexture(GL_TEXTURE_2D, 0);
    glCheckError();
}


Texture2D::Texture2D(int width, int height, GLenum foramt): TextureBase() {
    this->type = GL_TEXTURE_2D;
    this->isPBRMaterial = false;
    this->wasFound = true;
    this->type_string = "GL_TEXTURE_2D";
    this->fullPath = "Generated by OpenGL";
    this->texWidth = width;
    this->texHeight = height;
    this->internalFormat = foramt;

    // ------------------
    // TEXTURE GENERATION
    // -------------------
    glCreateTextures(GL_TEXTURE_2D,1, &this->ID);
    glCheckError();

    glBindTexture(GL_TEXTURE_2D, this->ID);
    glCheckError();

    glTexStorage2D(GL_TEXTURE_2D, 1, foramt, width, height);
    glCheckError();


    // ------------------
    // TEXTURE PARAMETERS
    // -------------------
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glCheckError();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glCheckError();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glCheckError();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glCheckError();

    // RELEASE
    glBindTexture(GL_TEXTURE_2D,0);
    glCheckError();
}

std::unique_ptr<float[]> Texture2D::getData() {
    int dataSize = this->texWidth * this->texHeight * 4;

    auto data = std::make_unique<float[]>(dataSize);

    //pixel buffer object whose main purpose is to get the data from the texture without blowing performance
    // it is getting data asynchronously
    GLuint pbo;
    glCreateBuffers(1,&pbo);
    glCheckError();
    glBindBuffer(GL_PIXEL_PACK_BUFFER, pbo);
    glCheckError();
    glBufferData(GL_PIXEL_PACK_BUFFER, dataSize*sizeof(float), nullptr,GL_STREAM_READ);
    glCheckError();

    this->bind();
    glGetTexImage(GL_TEXTURE_2D,0,GL_RGBA,GL_FLOAT, nullptr);

    float *imageData = (float*)glMapBuffer(GL_PIXEL_PACK_BUFFER, GL_READ_ONLY);
    if(imageData){
        std::copy(imageData,imageData + dataSize,data.get());
        glUnmapBuffer(GL_PIXEL_PACK_BUFFER);
    }

    glBindBuffer(GL_PIXEL_PACK_BUFFER, 0);
    glDeleteBuffers(1, &pbo);
}




